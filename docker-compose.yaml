version: '3'

services:
  ################################################
  ######         Docker Proxy Setup         ######
  ################################################
  dockerproxy:
    # depends_on:
    #   - watchtower
    environment: 
      CONTAINERS: 1
    image: tecnativa/docker-socket-proxy
    networks: 
      - dockerconn
    ports: 
      - 2375
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # <== Volume for docker admin
  
  ################################################
  ####        Traefik Proxy Setup           #####
  ###############################################
  traefik:
    image: traefik:v2.3
    depends_on:
      - dockerproxy
    restart: always
    container_name: traefik
    ports:
      - "80:80" # <== http
      - "443:443" # <== https
      - "2053:2053" # <== grpc
      - "8443:27012" # <== mongo secure connect
    environment:
      - CF_DNS_API_TOKEN=<CF_DNS_API_TOKEN>
      - CF_ZONE_API_TOKEN=<CF_ZONE_API_TOKEN>
      - CF_API_EMAIL=<MY_EMAIL>
    volumes:
      - ./letsencrypt:/letsencrypt # <== Volume for certs (TLS)
      - ./dynamic.yaml:/dynamic.yaml # <== Volume for dynamic conf file, **ref: line 27
      - ./traefik.toml:/etc/traefik/traefik.toml
      - ./cert/grpc_mycert.pem:/etc/traefik/grpc_mycert.pem
    networks:
      - server # <== Placing traefik on the network named server, to access containers on this network
      - dockerconn
    labels:
      - "traefik.enable=true" # <== Enable traefik on itself to view dashboard and assign subdomain to view it
      - traefik.http.routers.api.rule=Host(`172.104.33.91`)
      - traefik.http.routers.api.service=api@internal # <== Enabling the api to be a service to access
      - traefik.http.routers.api.middlewares=redirect@file
      - traefik.http.routers.api-secured.rule=Host(`172.104.33.91`)
      - traefik.http.routers.api-secured.middlewares=internal-auth@file
      - traefik.http.routers.api-secured.entrypoints=https
      - traefik.http.routers.api-secured.service=api@internal
      - traefik.http.routers.api-secured.tls.certresolver=mytlschallenge
    container_name: traefik

networks:
  server:
    external: true
  dockerconn:
    external: false
